Assignment 2

Your job is to extend, with the help of a text editor, the HTML and CSS submitted for Assignment 1.
The main goal is to use JavaScript to replace the static content in your product table with dynamic content (see task 3 below). Please make all tasks in the order given (we recommend you "warm up" by first doing task 1 and 2 before you do 3.
Task 4 is easier if you first do 3).
Make sure you understand the learning goals and have read the tips section on Canvas before you start coding.

- [ ] The product and any other tables you created for Assignment 1 should become sortable on all columns by clicking the table headers.
- [ ] You will be using the same database you used in Assignment 1 to POST your form data to.
- [ ] This database might be full with data you used to test your form.
- [ ] Even if it is not, it is nice to be able to reset your database to the original state.
- [ ] To achieve this, you need to add a reset button to your page that resets the information in the database.
- [ ] This button should reset the database associated with your key by sending an HTTP GET request to https://wt.ops.labs.vu.nl/api/????????/reset (replace the question marks with your 8-character API from Assignment 1)
- [ ] You should manually delete all the <tr> table rows in the HTML product table you submitted for Assignment 1, so you start fresh with an empty table.
- [ ] To fill the product table, its content should be created dynamically by using JavaScript to insert the data into the table.
- [ ] The data should be requested from our web server.
- [ ] You should first send an AJAX GET request to the same Web service as you used for the Assignment 1 form: https://wt.ops.labs.vu.nl/api18/????????.
- [ ] When this requests returns successfully, you should insert the returned JSON data into your table using the DOM.
- [ ] The form to add new products that you included in Assignment 1 resulted into an (ugly) new page when the submit button was pressed.
- [ ] This is the time to fix this!
- [ ] You should replace the default form submission handling of the browser by your own method.
- [ ] The result should be that users of your page can add new items without leaving or reloading the entire page, and that the submitted form data is posted in JSON to the server using an AJAX POST request.
- [ ] Note: there are alternative ways to achieve this, discuss with your lab partner how you will handle this before you start coding.

- [ ] Submission 
- [ ] Include URIs references to the appropriate CSS and JavaScript libraries in the head element of the HTML file.
- [ ] Use of URIs referring to the original location of the libraries on the Web is preferred.
- [ ] Do not submit files from third-party JavaScript libraries that you have downloaded from the Web.
- [ ] Only in case the original site explicitly requests not to "hotlink" their files, you may include them in your submission.
- [ ] If you do so, please indicate this clearly at the top of your HTML file, with a link to the page requesting you to refrain from hotlinking.
- [ ] Make sure you again include all (Lab 1 - 4) answers to the lab questions into your lab.html HTML file. Check the Canvas site of the course for other details.

Learning Goals
* understand the role of client-side scripting
* understand the notion of interactivity, events and event handler in Web pages
* understand how a rendered Web page can be programmatically changed using the DOM
* understand how to contact a Web server to update a rendered Web page using AJAX
* be able to find and reuse existing JavaScript code to enhance Web pages
* be able to find programming errors made
* The purpose of the assignment is to illustrate client-side scripting.
* To this end the students explore the functionality of a number of JavaScript libraries in some detail.
* The student is not required to learn syntactic details of JavaScript by heart but should be able to look these up in the appropriate documentation.
* Make sure you have read the complete assignment, including the hints and tips, before you start.

* TIPS

* While you may also use JavaScript in the body element, it often helps maintainability to keep a clean distinction between your semantic HTML markup in one file and all script code in a separate file, a file that is linked to from the head of your HTML file.
* This is the preferred way to make this assignment.
* Make sure you have done all lab 3 questions, especially those on the use of developer tools and JQuery.
* Checkout the "recipe" slides (nr 31 and 33 of Lecture 6) on Canvas if you need hints on how to approach the AJAX part of the assignment.
* Tip: all modern browsers support JSON.stringify(object), and knowing how to use it (find examples on the web) will save you a lot of time!
* You are not the first one to discover that it would be nice to sort tables or submit forms without leaving the page.
* So many people already have found and published JavaScript solutions for these problems.
* You are strongly encouraged not to reinvent the wheel, but to reuse as much as possible code that is already freely available on the Web.
* In this assignment, we only use JavaScript on the client-side (browser).
* This means that all material you find online related to server-side programming is most likely irrelevant!
* This include everything related to server-side JavaScript (node.js) and other server-side technologies, including PHP.
* Using JavaScript to change content in your document tree that has been already added into the tree by another piece of JavaScript can often be difficult and lead to unexpected problems.
* Look on the web for solutions.
* For example, sorting the dynamically created table might be much harder than sorting your static tables.
* You are encouraged to get both working, but note that if you only manage to get the static table sortable as required, you will already receive 15 out of 20 points!
* Note that if you do not have a static table because you forgot this in assignment 1, you are free to add one in this assignment!
* Be creative. You will learn much more by exploring than by just copy/pasting examples.
* Invest your time well: explore directions you find useful, do not spend too much effort creating a "fancy" page in the hope to get a higher mark!
* If you make errors in your JavaScript, they may be hard to find.
* Learning how to debug JavaScript is part of the goals of the assignment.
* To simplify debugging, you could make separate pages for the various parts of the assignment and develop them independently, and only merge them into one single page after everything works as expected.
* Make sure you have the right functionality in your browser to see syntax and other errors.
* For example, in Firefox use the "Error Console" under the "Tools" or use the Firebug plugin.
* In Chrome, make sure that you have "Developer mode" turned on and use the "Developer Tools" in the View menu.
* You may also use specific JavaScript debuggers, use the Web to find out how.
* If you cannot find a bug, even after spending a significant amount of time, feel free to ask help from other students during the lab sessions.
* Do not waste hours on a single bug!
* If you post questions to the course mailing list, please provide sufficient information and code fragments for us to be able to help you.
* Explain what does not work and explain what you have tried to get it working.
* If you explain your problem clearly and show what you have already learned, we will be happy to help you!
* If the deadline approaches and you feel you cannot make this assignment without spending an unrealistic amount of time debugging, submit what you have.
* Again, explain what does not work and explain what you have tried to get it working.
* The jQuery library allows you to do AJAX requests (both GET and POST) with only a few lines of code.
* It also hides all the complexities of using the low-level XMLHttpRequest object directly.
* We therefore advise against the direct use of XMLHttpRequest (except for advanced students).
* If you find code examples using XMLHttpRequest, look further for examples using the much easier jQuery AJAX methods.
